#Questão 1

#a complexidade desse código é O(n)

class Node:
  def __init__(self, data):
    self.data=data
    self.next=None
class Lista_encadeada:
  def __init__(self, lista):
    self.head=Node(lista[0])
    no_atual=self.head
    for numero in lista[1:]:
      novo_no=Node(numero)
      no_atual.next=novo_no
      no_atual=novo_no
  def vamos_printar(self):
    no_atual=self.head
    while no_atual is not None:
      print(no_atual.data, end=" ")
      no_atual=no_atual.next
  def inverte_ordem(self):
    no_atual=self.head
    lista_inversa=[]
    while no_atual is not None:
      lista_inversa.insert(0, no_atual.data)
      no_atual=no_atual.next
    return Lista_encadeada(lista_inversa)

lista_encadeada=Lista_encadeada([1, 2, 3])
invertido=lista_encadeada.inverte_ordem()
invertido.vamos_printar()


#Questão 2
def romanos(x):
  conversor={1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}
  numero=''
  for valor, romano in conversor.items():
    while x >= valor:
      numero = numero + romano
      x = x - valor
  return numero   
romanos()   

#Questão 3 item a)

def potencia(x:float, n:int):
  resultado=1
  for i in range(n):
    resultado=resultado*x
  if n>=0:
    for _ in range(n):
      resultado=resultado*x
  else:
    for _ in range(-n):
      resultado = resultado*(1/x)
  return resultado
potencia(2.0, 4)


#Questão 4

def odd_one_out(lista):
    contagem = {}
    for num in lista: 
        contagem[num]=contagem.get(num, 0)+1 #conta quantas vezes um elemento aparece na lista e caso seja a primeira vez, a contagem é 0 + 1
    for numero, frequencia in contagem.items():
        if frequencia==1: #se valor = 1, então o elemento só aparece uma vez na lista
            return numero
odd_one_out([1, 1, 2, 3, 4, 5, 3, 4, 2])

#Questão 5
def longest_common_prefix(lista):
    for r in range(1, len(lista)):
        prefixo=''
        for j in range(len(lista[0])):
            if lista[0][j]==lista[r][j]:
                prefixo= prefixo+lista[0][j]
            else:
                break
    return prefixo
            
longest_common_prefix(['flower', 'floow', 'fla', 'aaaaa'])

#a complexidade desse código é O(n*m)


